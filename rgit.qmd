---
title: "Using Github with Quarto and Virtual Environments"
---

Adapted from [Source](https://support.posit.co/hc/en-us/articles/360023654474-Installing-and-Configuring-Python-with-RStudio)

#### Step 1. Set up Git in RStudio [link](https://docs.posit.co/ide/user/ide/guide/tools/version-control.html)

Go to Tools --> Version Control --> Project Setup

Once a Version Control system has been installed, it needs to be activated on the system by following these steps:
- From the Tools menu, click Global Options
- Click on the Git/SVN tab
- Click Enable version control interface for RStudio projects
- If necessary, enter the path for the Git or SVN executable where provided. A SSH key can be created or added for SSH if necessary.

#### Step 2. Github Personal Action Token (PAT) [link](https://happygitwithr.com/https-pat.html)

- Go to https://github.com/settings/tokens and click Generate Token.
- Or, from R do: 'usethis::create_github_token()'
- Click “Generate token”
- Copy the generated PAT to your clipboard. Or leave that browser window open and available for a little while, so you can come back to copy the PAT. Provide this PAT next time a Git operation asks for your password.
- You could even get out ahead of this and store the PAT explicitly right now. In R, call gitcreds::gitcreds_set() to get a prompt where you can paste your PAT.


#### Step 3. Create a new, empty repository in Github

- Create a new repository in Github, for example "itm237"
- Go to Settings --> Pages and set Branch to "main" and select folder to "Docs"

#### Step 4. Using Virtual Environments with Quarto and Github

For Git users, in order to track project dependencies, continue below:

- While in the virtual environment, start by installing a package. For this example we will use pandas. Run pip install pandas
- Run deactivate to stop the virtual environment
- Initialize the repo by running git init
- Run echo ‘env' > .gitignore to include the env folder in the .gitignore file so the virtual environment is ignored in source control
- Run pip freeze > requirements.txt to place the dependencies in a text file to be committed. Freezing reads all the installed dependencies and then produces a text file with the name of the dependency and the installed version number.
- Run git add requirements.txt to check the file into source control.
- Commit the files and push to a repo.
    pip install virtualenv
    
#### Step 5. Pushing existing repository from the terminal in R

- To push an existing repository (e.g. this is a new repository named 'test' that was created)
```{}
  git remote add origin https://github.com/prajjwalpanday/test.git
  git branch -M main
  git push -u origin main
```
- Navigate to the RStudio.proj which is the site you would like to upload the the new repository
- Render the local site
- Commit the local changes with Git

```{}
  git status
  git add .
  git commit -m "Add home page, navigation and theme"
```

- Push changes to the remote repository
```{}
  git push -u origin main
```



